export class hourglassAnimation extends HTMLElement
{
  #root;
  #template;
  #mainObserver;
  #animationsObject;

  static get observedAttributes()
  {
      return ["animationDuration"];
  }

  constructor()
  {
      super();

      this.#template = document.createElement("template");

      this.#template.innerHTML =
      `
        <style>

          div
          {
            box-sizing: border-box;
          }  

          .container
          {
            width: inherit;
            aspect-ratio: 1/1.65;

            opacity: 0;

            position: relative;
          }  

          .upperBase,
          .lowerBase
          {
            position: absolute;

            width: 100%;
            aspect-ratio: 6.2/1;

            left: 0%;

            border-radius: 6% / 50%;
            border: 2px solid black;

            background-color: red;
          }

          .upperBase
          {
            top: 0%;
          }

          .lowerBase
          {
            bottom: 0%;
          }

          .leftColumn,
          .rightColumn
          {
            position: absolute;
            top: 0%;
            z-index: -1;

            width: 6.5%;
            height: 100%;

            border: 2px solid black;

            background-color: red;
          }

          .leftColumn
          {
            left: 10%;
          }

          .rightColumn
          {
            right: 10%;
          }

          .innerBase
          {
            position: absolute;

            left: 50%;
            transform: translate(-50%, 0%);
   
            width: 67.5%;
            aspect-ratio: 9.5/1;

            border: 2px solid black;

            background-color: red;
          }

          .upperBase > .innerBase
          {
            top: 100%;
            border-radius: 0% 0% 7.5% 7.5% / 0% 0% 100% 100%;
          }

          .lowerBase > .innerBase
          {
            bottom: 100%;
            border-radius: 7.5% 7.5% 0% 0% / 100% 100% 0% 0%;
          }

          .upperGlass,
          .lowerGlass
          {
            position: absolute;
            z-index: -1;
            left: 50%;
            transform: translate(-50%, 0%);
            
            width: 55%;
            height: 50%;

            background-color: #b6f1ff;

            border: 2px solid black;

            overflow: hidden;
          }

          .upperGlass
          {
            top: 0%;
            border-radius: 7.5% 7.5% 50% 50% / 20% 20% 80% 80%;
          }

          .lowerGlass
          {
            bottom: 0%;
            border-radius: 50% 50% 7.5% 7.5% / 80% 80% 20% 20%;
          }

          .upperSand,
          .lowerSandLine,
          .lowerSand
          {     
            position: absolute;
            background-color: #f0a72f;

          }

          .upperSand
          {
            position: absolute;
            
            width: 100%;
            height: 100%;

          }

          .lowerSandLine
          {
            left: 50%;
            transform: translate(-50%, 0%);

            width: 7.5%;
            height: 75%;
          }

          .lowerSand
          {
            width: 200%;
            aspect-ratio: 1/1;
            
            transform: rotate(45deg);
            left: -50%;

            border-top-left-radius: 10%;
          }

          @keyframes lineFall
          {
            0%
            {
                bottom: 100%;
            }

            10%
            {
                bottom: 25%;
            }

            99.9%
            {
                bottom: 25%;
            }

            100%
            {
                bottom: -50%;
            }

          }

          @keyframes _lineFall
          {
            0%
            {
                bottom: 100%;
            }

            10%
            {
                bottom: 25%;
            }

            99.9%
            {
                bottom: 25%;
            }

            100%
            {
                bottom: -50%;
            }

          }

          @keyframes fall
          {
            0%
            {
                top: 40%;
            }

            100%
            {
                top: 100%;
            }
          }

          @keyframes _fall
          {
            0%
            {
                top: 40%;
            }

            100%
            {
                top: 100%;
            }
          }

          @keyframes rise
          {
            0%
            {
                top: 100%;
            }

            95%
            {
                top: 40%;
            }

            100%
            {
                top: 40%;
            }
          }

          @keyframes _rise
          {
            0%
            {
                top: 100%;
            }

            95%
            {
                top: 40%;
            }

            100%
            {
                top: 40%;
            }
          }

          @keyframes containerOpacity
          {
            0%
            {
                opacity: 0;
            }

            5%
            {
                opacity: 1;
            }

            95%
            {
                opacity: 1;
            }

            100%
            {
                opacity: 0;
            }
          }

          @keyframes _containerOpacity
          {
            0%
            {
                opacity: 0;
            }

            5%
            {
                opacity: 1;
            }

            95%
            {
                opacity: 1;
            }

            100%
            {
                opacity: 0;
            }
          }

        </style>

        <div class="container">

            <div class="upperBase">
            
                <div class="innerBase"></div>

            </div>
            
            <div class="leftColumn"></div>

            <div class="upperGlass">
            
                <div class="upperSand"></div>

            </div>

            <div class="lowerGlass">
            
                <div class="lowerSandLine"></div>
                <div class="lowerSand"></div>
            
            </div>

            <div class="rightColumn"></div>

            <div class="lowerBase">

                <div class="innerBase"></div>
            
            </div>
        
        </div>
      `; 
      
      this.#root = this.attachShadow({mode: "open"});
      this.#root.appendChild(this.#template.content.cloneNode(true));
  }

  connectedCallback()
  {
    this.#root.getRootNode().host.style.display = "inline-block";

    this.#animationsObject = 
    {
        "0":
                {
                    "containerOpacity": "containerOpacity",
                    "fall": "fall",
                    "lineFall": "lineFall",
                    "rise": "rise"
                },
        "1":
                {
                    "containerOpacity": "_containerOpacity",
                    "fall": "_fall",
                    "lineFall": "_lineFall",
                    "rise": "_rise"
                }         
    }

    let duration = undefined;
    let index = "0";

    this.#mainObserver = new MutationObserver((mutationArray) =>
      {
        mutationArray.forEach((mutation) =>
          {
            if(mutation.attributeName === "animationduration")
            {
                duration = mutation.target.getAttribute("animationDuration");

                if(duration !== "null")
                {
                    this.#root.querySelector(".container").style.animation = `${this.#animationsObject[index]["containerOpacity"]} ${duration}ms 1 both`;
                    this.#root.querySelector(".upperSand").style.animation = `${this.#animationsObject[index]["fall"]} ${duration}ms 1 both ease-in`;
                    this.#root.querySelector(".lowerSandLine").style.animation = `${this.#animationsObject[index]["lineFall"]} ${duration}ms 1 both`;
                    this.#root.querySelector(".lowerSand").style.animation = `${this.#animationsObject[index]["rise"]} ${19*duration/20}ms ${duration/20}ms 1 both linear`;
                
                    if(index === "0")
                    {
                        index = "1";
                    } 
                    else if(index === "1")
                    {
                        index = "0";
                    }    
                }   
                else if(duration === "null")
                {
                    [
                        this.#root.querySelector(".container"),
                        this.#root.querySelector(".upperSand"),
                        this.#root.querySelector(".lowerSandLine"),
                        this.#root.querySelector(".lowerSand")
                    ]
                    .forEach((element) =>
                      {
                        element.style.animation = "none";
                      }
                    );
                }    
                
            }    
          }
        );
      }
    );

    this.#mainObserver.observe(this.#root.getRootNode().host, {attributes: true});
  }

}

customElements.define("hourglass-animation", hourglassAnimation);
